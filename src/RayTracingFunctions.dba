rem ======================================================
rem ======================================================
rem =============== RayTracing Functions =================
rem ======================================================
rem ======================================================

function dot(aa#,ba#,ca#,ab#,bb#,cb#)
	dotresult# = aa#*ab# + ba#*bb# + ca#*cb#
endfunction dotresult#

function norm(a#,b#,c#)
	Norm# = sqrt(dot(a#,b#,c#,a#,b#,c#))
endfunction Norm#

rem Build local coordinate system as (camright#, camup#, camforward#) in world coordinate system
rem depending on camera angles
function BuildLocalCoordinateSystem(cama#,camb#,camc#)
	rem Get camera forward normalized vector
	camforward#(1) = COS(cama#)*SIN(camb#)*COS(camc#)-SIN(cama#)*SIN(camc#)
	camforward#(2) = SIN(cama#)*(-1.0)*COS(camc#)-COS(cama#)*SIN(camb#)*SIN(camc#)
	camforward#(3) = COS(cama#)*COS(camb#)
	Norm# = norm(camforward#(1),camforward#(2),camforward#(3))
	camforward#(1) = camforward#(1)/Norm#
	camforward#(2) = camforward#(2)/Norm#
	camforward#(3) = camforward#(3)/Norm#
	
	rem Get camera up normalized vector
	camup#(1) = SIN(cama#)*SIN(camb#)*COS(camc#)+COS(cama#)*SIN(camc#)
	camup#(2) = COS(cama#)*COS(camc#)-SIN(cama#)*SIN(camb#)*SIN(camc#)
	camup#(3) = SIN(cama#)*COS(camb#)
	Norm# = norm(camup#(1),camup#(2),camup#(3))
	camup#(1) = camup#(1)/Norm#
	camup#(2) = camup#(2)/Norm#
	camup#(3) = camup#(3)/Norm#
	
	rem Get camera right normalized vector
	camright#(1) = COS(camb#)*COS(camc#)
	camright#(2) = (-1.0)*COS(camb#)*SIN(camc#)
	camright#(3) = (-1.0)*SIN(camb#)
	Norm# = norm(camright#(1),camright#(2),camright#(3))
	camright#(1) = camright#(1)/Norm#
	camright#(2) = camright#(2)/Norm#
	camright#(3) = camright#(3)/Norm#
endfunction

rem Build ray direction vector in (camright#, camup#, camforward#) local coordinate system
rem pos#() contains the position of the ray origin
rem dir#() contains the normalized direction of the ray
function BuildDirectionRay(i,j,width,height,planeWidth#,planeHeight#)
    tx# = (i-1) / (width-1.0)
    ty# = (height-j) / (height-1.0)

    rem Get world position of the view plane
    localPosX# = bottomLeftLocal#(1) + planeWidth#*tx#
    localPosY# = bottomLeftLocal#(2) + planeHeight#*ty#
    localPosZ# = bottomLeftLocal#(3)

    pos#(1) = cam#(1) + localPosX#*camright#(1) + localPosY#*camup#(1) + localPosZ#*camforward#(1)
    pos#(2) = cam#(2) + localPosX#*camright#(2) + localPosY#*camup#(2) + localPosZ#*camforward#(2)
    pos#(3) = cam#(3) + localPosX#*camright#(3) + localPosY#*camup#(3) + localPosZ#*camforward#(3)

    dir#(1) = pos#(1) - cam#(1)
    dir#(2) = pos#(2) - cam#(2)
    dir#(3) = pos#(3) - cam#(3)
	Norm# = norm(dir#(1),dir#(2),dir#(3))
    dir#(1) = dir#(1)/Norm#
    dir#(2) = dir#(2)/Norm#
    dir#(3) = dir#(3)/Norm#
endfunction

rem Build current ray hitinfo structure using a sphere which center is at (scx#,scy#,scz#)
rem in world coordinate system and sradius# its radius
function RaySphere(scx#,scy#,scz#,sradius#)
	hitpoint#(1) = 0.0
	hitpoint#(2) = 0.0
	hitpoint#(3) = 0.0
	hitnormal#(1) = 0.0
	hitnormal#(2) = 0.0
	hitnormal#(3) = 0.0

	dst# = -1.0

	rem Assuming that position 0,0,0 is at the center of the sphere
	rem Checking if the ray has hit the sphere is just solving the following equation :
	rem ||Pos + Dir * dst||^2 = sradius^2,
	rem where dst(=distance) being the value we want to calculate
	rem 
	rem    ||Pos + Dir*dst||^2 = sradius^2
	rem => (Pos + Dir*dst).(Pos + Dir*dst) = sradius^2
	rem => Pos.Pos + 2*Pos.(Dir*dst) + (Dir*dst).(Dir*dst) = sradius^2
	rem => Dir.Dir * dst^2 + 2*(Pos.Dir) * dst + Pos.Pos - sradius^2
	rem This is a quadratic polynomial equation (ax^2 + bx + c = 0) width
	rem a = Dir.Dir which here equals 1
	rem b = 2 * (Pos.Dir)
	rem c = Pos.Pos - sradius^2
	rem 
	rem Solutions if only discriminant is positive or equals 0

	oposx# = pos#(1) - scx#
	oposy# = pos#(2) - scy#
	oposz# = pos#(3) - scz#

	a# = dot(dir#(1),dir#(2),dir#(3),dir#(1),dir#(2),dir#(3))
	b# = 2*dot(oposx#,oposy#,oposz#,dir#(1),dir#(2),dir#(3))
	c# = dot(oposx#,oposy#,oposz#,oposx#,oposy#,oposz#) - sradius#*sradius#

	delta# = b#*b# + (-4.0)*a#*c#

	if (delta# >= 0)
		dst# = ((-1.0)*b# + (-1.0)*sqrt(delta#)) / (2.0*a#)

		if (dst# >= 0)
			hitpoint#(1) = pos#(1) + dst#*dir#(1)
			hitpoint#(2) = pos#(2) + dst#*dir#(2)
			hitpoint#(3) = pos#(3) + dst#*dir#(3)
			hitnormal#(1) = hitpoint#(1) - scx#
			hitnormal#(2) = hitpoint#(2) - scy#
			hitnormal#(3) = hitpoint#(3) - scz#
			Norm# = norm(hitnormal#(1),hitnormal#(2),hitnormal#(3))
			hitnormal#(1) = hitnormal#(1)/Norm#
			hitnormal#(2) = hitnormal#(2)/Norm#
			hitnormal#(3) = hitnormal#(3)/Norm#
		endif
	endif

endfunction dst#

function CalculateRayCollision(numSpheres)
	rem temporary HitInfo variable to keep track of the smallest distance collision
	hpx#=0.0
	hpy#=0.0
	hpz#=0.0
	hnx#=0.0
	hny#=0.0
	hnz#=0.0
	hitmaterial(1)=0
	hitmaterial(2)=0
	hitmaterial(3)=0
	hitmaterial(4)=0
	hitmaterial(5)=0
	hitmaterial(6)=0
	hitmaterial(7)=0
	closestHitDst# = -1.0

	for index=1 to numSpheres
		rem If object doesn't exist, we skip
		rem We check first if there is a number >0 stored
		if SpheresID(index,1)>0
			if object exist(SpheresID(index,1))>=1

				currentDst# = RaySphere(Spheres#(index,1),Spheres#(index,2),Spheres#(index,3),Spheres#(index,4))
				
				rem Don't update if ray didn't hit or ray hit but a further sphere
				if currentDst# > -1.0
					if closestHitDst# > -1.0
						if currentDst# < closestHitDst#

							rem Update closest hitinfo
							closestHitDst# = currentDst#
							hpx#=hitpoint#(1)
							hpy#=hitpoint#(2)
							hpz#=hitpoint#(3)
							hnx#=hitnormal#(1)
							hny#=hitnormal#(2)
							hnz#=hitnormal#(3)
							hitmaterial(1)=Spheres#(index,5)
							hitmaterial(2)=Spheres#(index,6)
							hitmaterial(3)=Spheres#(index,7)
							hitmaterial(4)=Spheres#(index,8)
							hitmaterial(5)=Spheres#(index,9)
							hitmaterial(6)=Spheres#(index,10)
							hitmaterial(7)=Spheres#(index,11)

						endif
					else

						rem Update closest hitinfo
						closestHitDst# = currentDst#
						hpx#=hitpoint#(1)
						hpy#=hitpoint#(2)
						hpz#=hitpoint#(3)
						hnx#=hitnormal#(1)
						hny#=hitnormal#(2)
						hnz#=hitnormal#(3)
						hitmaterial(1)=Spheres#(index,5)
						hitmaterial(2)=Spheres#(index,6)
						hitmaterial(3)=Spheres#(index,7)
						hitmaterial(4)=Spheres#(index,8)
						hitmaterial(5)=Spheres#(index,9)
						hitmaterial(6)=Spheres#(index,10)
						hitmaterial(7)=Spheres#(index,11)

					endif
				endif
			endif
		endif
	next index

	rem We kept closest hitinfo, reupload to global arrays
	rem HitMaterial has already been updated
	hitpoint#(1) = hpx#
	hitpoint#(2) = hpy#
	hitpoint#(3) = hpz#
	hitnormal#(1) = hnx#
	hitnormal#(2) = hny#
	hitnormal#(3) = hnz#
endfunction  closestHitDst#

rem Trace the reverse path of a ray of light from the camera
function Trace(maxBounceCount, numSpheres, rndrange)
	rayColorR = 255
	rayColorG = 255
	rayColorB = 255

	incominglight(1) = 0
	incominglight(2) = 0
	incominglight(3) = 0

	for i=0 to maxBounceCount
		closestHitDst# = CalculateRayCollision(numSpheres)
		if closestHitDst# > -1.0
			rem pos# is now the point of bounce
			pos#(1) = hitpoint#(1)
			pos#(2) = hitpoint#(2)
			pos#(3) = hitpoint#(3)
			rem dir# is now the new direction
			rem we bounced in a random (normalized) direction first
			dir#(1) = RandomValueNormalDistribution(rndrange)
			dir#(2) = RandomValueNormalDistribution(rndrange)
			dir#(3) = RandomValueNormalDistribution(rndrange)
			Norm# = norm(dir#(1),dir#(2),dir#(3))

			dir#(1) = dir#(1)/Norm#
			dir#(2) = dir#(2)/Norm#
			dir#(3) = dir#(3)/Norm#
			rem and then we make sure we are in the same "hemisphere"
			rem as the normal direction

			if dot(hitnormal#(1),hitnormal#(2),hitnormal#(3),dir#(1),dir#(2),dir#(3)) < 0
				dir#(1) = (-1.0)*dir#(1)
				dir#(2) = (-1.0)*dir#(2)
				dir#(3) = (-1.0)*dir#(3)
			endif

			rem we get the emitted light and send it to the incomingLight array
			emittedLightR = (hitmaterial(4) * hitmaterial(7)) / 255
			emittedLightG = (hitmaterial(5) * hitmaterial(7)) / 255
			emittedLightB = (hitmaterial(6) * hitmaterial(7)) / 255
			incominglight(1) = incominglight(1) + (emittedLightR * rayColorR) / 255
			incominglight(2) = incominglight(2) + (emittedLightG * rayColorG) / 255
			incominglight(3) = incominglight(3) + (emittedLightB * rayColorB) / 255

			rem we taint the ray with the material of the ray
			rayColorR = (rayColorR * hitmaterial(1)) / 255
			rayColorG = (rayColorG * hitmaterial(2)) / 255
			rayColorB = (rayColorB * hitmaterial(3)) / 255
		else
			rem incominglight(1) = incominglight(1) + (EnvironmentLight(1) * EnvironmentLight(4))/255
			rem incominglight(2) = incominglight(2) + (EnvironmentLight(2) * EnvironmentLight(4))/255
			rem incominglight(3) = incominglight(3) + (EnvironmentLight(3) * EnvironmentLight(4))/255
			exit
		endif
	next i
endfunction

function debug_print(str$)
	sync on
	set cursor 0,0
	print "bounce = ",i
	print "posx = ",pos#(1)
	print "posx = ",pos#(2)
	print "posx = ",pos#(3)
	print "dirx = ",dir#(1)
	print "diry = ",dir#(2)
	print "dirz = ",dir#(3)
	print "---"
	print "last RandomValueNormalDistribution value = ",debugvalues#(1)
	print "--> theta = ",debugvalues#(2)
	print "--> rho = ",debugvalues#(3)
	print "last input 'x' for 'Ln(x)' approx = ",debugvalues#(4)
	print "--> result Ln(x) = ",debugvalues#(5)
	print "--> nb of interations to get to that Ln(x) value = ",debugvalues#(6)
	print "---"
	print "MCR = ",hitmaterial(1)
	print "MCG = ",hitmaterial(2)
	print "MCB = ",hitmaterial(3)
	print "MLR = ",hitmaterial(4)
	print "MLG = ",hitmaterial(5)
	print "MLB = ",hitmaterial(6)
	print "MLS = ",hitmaterial(7)
	sync
	save bitmap str$
	sync off
endfunction
