rem ======================================================
rem ======================================================
rem =============== Ray Tracing Project ==================
rem ======================================================
rem ======================================================

#include "Random.dba"
#include "3DSceneManager.dba"
#include "RayTracingFunctions.dba"
#include "RenderingFunctions.dba"

rem -----------------------------
rem -------- Parameters ---------
rem -----------------------------

rem Screen resolution
width = 640
height = 480

rem TLDR : times below are no longer relevant
rem Time below are calculated from the beginning of the graphical render
rem meaning after the calculation, which can now last quite a lot of time 
rem For 1920x1080:
rem 20 : 96	x 54 	in 21sec
rem 10 : 192x 108 in 1min
rem 3  : 640x 360 in 15min
rem 
rem For 640x480:
rem 8  : 80	x 60  in 20sec
rem Render ratio (=1 full render, >1 faster preview)
pratio = 1

rem Maximum number of spheres in the scene
maxNumberOfSpheres = 5

rem Maximum ray bounces
maxBounceCount = 5

rem Number of rays per pixel
numRaysPerPixel = 10

rem -----------------------------
rem ---- Built-in 3D render -----
rem -----------------------------

rem Change screen resolution
set display mode width,height,16

rem Change background (backdrop) color to black
backdrop on
color backdrop rgb(10,10,20)

rem --- 3D Camera fixed parameters ---
camfov# = 3.14/2.905
camNearClipPlane# = 1.0
camFarClipPlane# = 3000.0
set camera fov camfov#
set camera range camNearClipPlane#,camFarClipPlane#
set camera view 0,0,width,height
speedcam# = 1.0

rem Bottom left camera point coordinates in local coordinate system
dim bottomLeftLocal#(3)
PI# = 104348.0/33215.0
planeHeight# = camNearClipPlane# * TAN(camfov#*0.5*180.0/PI#) * 2
planeWidth# = (planeHeight#*width)/height
bottomLeftLocal#(1) = -1*planeWidth#/2.0
bottomLeftLocal#(2) = -1*planeHeight#/2.0
bottomLeftLocal#(3) = camNearClipPlane#

rem Exponential needed in calculation but not available here...
rem so approxation needed
dim Exponential#(1)
Exponential#(1) = ApproxEXP(1000)

rem for mathematical debug purposes
rem 1 : last RandomValueNormalDistribution value
rem 2 : --> theta
rem 3 : --> rho
rem 4 : last input 'x' for 'Ln(x)' approx
rem 5 : --> result Ln(x)
rem 6 : --> nb of interations to get to that Ln(x) value
dim debugvalues#(10)

rem Image data in RGB
dim pixels(width,height,3)
rem Camera position coordinates
dim cam#(3)
rem Camera local coordinate system
dim camforward#(3)
dim camup#(3)
dim camright#(3)
rem --- Ray Infos ---
rem Current pixel position in world's coordinates
dim pos#(3)
rem Current pixel ray direction (normalized)
dim dir#(3)
rem Current ray HitInfo
dim hitpoint#(3)
dim hitnormal#(3)
dim hitmaterial(7)
rem SpheresID : ID
rem Spheres# : posx,posy,posz,radius,mcr,mcg,mcb,mlr,mlg,mlb,mls
rem (mcr/g/b -> material colour red/green/blue)
rem (mlr/g/b -> material light red/green/blue, as emitting light)
rem (mls	 -> material light strength)
dim SpheresID(maxNumberOfSpheres)
dim Spheres#(maxNumberOfSpheres,11)
rem incomingLight from the Trace function
dim incominglight(3)

rem --- 3D Scene ---
autocam off

newSphere(1,1001,0.0,-490.0,0.0,500.0,128,128,255,0,0,0,0)

newSphere(2,1002,0.0,12.5,0.0,2.5,255,0,0,0,0,0,0)

newSphere(3,1003,5.0,12.5,0.0,2.5,0,255,0,0,0,0,0)

newSphere(4,1004,-5.0,12.5,0.0,2.5,0,0,255,0,0,0,0)

newSphere(5,1005,0.0,0.0,1000.0,450.0,0,0,0,255,255,255,255)

position camera -10.0,17.5,-20.0
point camera 200.0,12.5,0.0

do

	rem On force la position du pointeur souris, de maniere cavaliere (supprimez la ligne suivante pour tester)
	hide mouse
	position mouse 320,240
	
	rem La souris dirige les angles de la camera
	cx#=wrapvalue(cx#+mousemovey())
	cy#=wrapvalue(cy#+mousemovex())
	cz#=wrapvalue(cz#+mousemovez())
	rotate camera cx#,cy#,cz#
	
	rem Gestion input utilisateur
	if Upkey()=1
		move camera speedcam#
	endif
	
	if Downkey()=1
		move camera (-1)*speedcam#
	endif
	
	rem Modificateur vitesse
	if inkey$()="+"
		speedcam# = speedcam# + 0.1
	endif
	
	if inkey$()="-"
		speedcam# = speedcam# - 0.1
		if speedcam#<0.1 then speedcam# = 0.1
	endif
	
	if Returnkey()=1
		show mouse
		
		rem Get camera position
		cam#(1) = camera position x()
		cam#(2) = camera position y()
		cam#(3) = camera position z()
		cama# = camera angle x()
		camb# = camera angle y()
		camc# = camera angle z()
	
		rem Get camera coordinate system in (camright#,camup#,camforward#) system
		BuildLocalCoordinateSystem(cama#,camb#,camc#)
	
		for j=1 to height
			for i=1 to width
				r=0
				g=0
				b=0
	
				rem Get ray direction in world coordinate system
				BuildDirectionRay(i,j,width,height,planeWidth#,planeHeight#)
				rem Result in dir# array
		
				rem Color map XYZ direction to RGB 
				rem gosub _map_xyz_to_rgb
	 			rem gosub _white_sphere_r_20
				rem gosub _multiple_spheres
				rem gosub _trace_ray
				gosub _trace_multiple_rays
				
				pixels(i,j,1)=r
				pixels(i,j,2)=g
				pixels(i,j,3)=b
			next i
		next j
	
		hide mouse
	
		rem -----------------------
		rem ------ RENDERING ------
		rem -----------------------
		
		set camera view 0,0,1,1
		
		Render2D(width,height,pratio)
		show mouse
	
		suspend for key
	
		hide mouse
	
		set camera view 0,0,width,height
	endif
	
	if spacekey()=1	
		show mouse
	
		cam#(1) = camera position x()
		cam#(2) = camera position y()
		cam#(3) = camera position z()
		cama# = camera angle x()
		camb# = camera angle y()
		camc# = camera angle z()
	
		rem Get camera coordinate system in (camright#,camup#,camforward#) system
		BuildLocalCoordinateSystem(cama#,camb#,camc#)
		
		for x=1 to 10
			for y=1 to 10
				r=0
				g=0
				b=0
	
				rem ID of the current object
				id = (x-1)*10 + y
	
				if (object exist(id)=0)
					make object sphere id,0.1
					set object id,1,1,0
				endif
	
				rem Get ray direction in world coordinate system
				BuildDirectionRay(x,y,10,10,planeWidth#,planeHeight#)
				rem Result in dir# array, pos# array has current pixel point coordinate in world coordinate system
	
				position object id,pos#(1),pos#(2),pos#(3)
	
				rem Test using those spheres
				rem gosub _xyz_to_rgb
				rem gosub _white_sphere_r_20
				rem gosub _multiple_spheres
				gosub _trace_ray
	
				color object id,rgb(r,g,b)
			next y
		next x
	
		suspend for key
	
		hide mouse
	endif
	
	if escapekey()=1
		exit
	endif

loop

end

rem RENDER SUBROUTINES
_map_xyz_to_rgb:
	if dir#(1) < 0.0 then dir#(1) = 0.0
	if dir#(1) > 1.0 then dir#(1) = 1.0
	if dir#(2) < 0.0 then dir#(2) = 0.0
	if dir#(2) > 1.0 then dir#(2) = 1.0
	if dir#(3) < 0.0 then dir#(3) = 0.0
	if dir#(3) > 1.0 then dir#(3) = 1.0
	r=dir#(1)*255
	g=dir#(2)*255
	b=dir#(3)*255
return

_white_sphere_r_20:
	value=0
	if RaySphere(object position x(1001),object position y(1001),object position z(1001),10.0) > -1.0 then value = 255
	r=value
	g=value
	b=value
return

_multiple_spheres:
	value#=CalculateRayCollision(maxNumberOfSpheres)
	r = hitmaterial(1)
	g = hitmaterial(2)
	b = hitmaterial(3)
return

_trace_ray:
	Trace(maxBounceCount, maxNumberOfSpheres, 1000)
	r = incominglight(1)
	g = incominglight(2)
	b = incominglight(3)
return

_trace_multiple_rays:
	rem Init total R G B
	totalR = 0
	totalG = 0
	totalB = 0

	rem Store original pos and dir
	posx# = pos#(1)
	posy# = pos#(2)
	posz# = pos#(3)
	dirx# = dir#(1)
	diry# = dir#(2)
	dirz# = dir#(3)
	
	for rayNum=1 to numRaysPerPixel
		rem Restore original pos and dir
		pos#(1) = posx#
		pos#(2) = posy#
		pos#(3) = posz#
		dir#(1) = dirx#
		dir#(2) = diry#
		dir#(3) = dirz#

		rem Trace calculation
		Trace(maxBounceCount, maxNumberOfSpheres, 1000)

		rem Feeding total R G B for mean
		totalR = totalR + incominglight(1)
		totalG = totalG + incominglight(2)
		totalB = totalB + incominglight(3)
	next rayNum
	
	rem Mean into pixel
	r = totalR/numRaysPerPixel
	g = totalG/numRaysPerPixel
	b = totalB/numRaysPerPixel
return
