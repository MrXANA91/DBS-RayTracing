rem ======================================================
rem ======================================================
rem =============== Ray Tracing Project ==================
rem ======================================================
rem ======================================================

#include "RayTracingFunctions.dba"
#include "RenderingFunctions.dba"

rem -----------------------------
rem -------- Parameters ---------
rem -----------------------------

rem Screen resolution
width = 640
height = 480

rem Render ratio (=1 full render, >1 faster preview)
rem Pour 1920x1080:
rem 20 : 96	x 54 	en 21sec
rem 10 : 192x 108 en 1min
rem 3  : 640x 360 en 15min
rem 
rem Pour 640x480:
rem 8  : 80	x 60  en 20sec
pratio = 8

rem -----------------------------
rem ---- Built-in 3D render -----
rem -----------------------------

rem Change screen resolution
set display mode width,height,16

rem --- 3D Camera fixed parameters ---
camfov# = 3.14/2.905
camNearClipPlane# = 1.0
camFarClipPlane# = 3000.0
set camera fov camfov#
set camera range camNearClipPlane#,camFarClipPlane#
set camera view 0,0,width,height

rem Bottom left camera point coordinates in local coordinate system
dim bottomLeftLocal#(3)
PI# = 104348.0/33215.0
planeHeight# = camNearClipPlane# * TAN(camfov#*0.5*180.0/PI#) * 2
planeWidth# = (planeHeight#*width)/height
bottomLeftLocal#(1) = -1*planeWidth#/2.0
bottomLeftLocal#(2) = -1*planeHeight#/2.0
bottomLeftLocal#(3) = camNearClipPlane#

rem --- 3D Scene ---
autocam on
make object sphere 1000,20
set object 1000,0,0,0
autocam off

do

rem On force la position du pointeur souris, de maniere cavaliere (supprimez la ligne suivante pour tester)
position mouse 320,240

rem La souris dirige les angles de la camera
cx#=wrapvalue(cx#+mousemovey())
cy#=wrapvalue(cy#+mousemovex())
cz#=wrapvalue(cz#+mousemovez())
rotate camera cx#,cy#,cz#

rem Deplacement simple
if Upkey()=1
	move camera 0.1
endif

if Downkey()=1
	move camera -0.1
endif

if Returnkey()=1
	hide mouse
	
	rem Image data in RGB
	dim pixels(width,height,3)
	rem Camera position coordinates
	dim cam#(3)
	rem Camera local coordinate system
	dim camforward#(3)
	dim camup#(3)
	dim camright#(3)
	rem --- Ray Infos ---
	rem Current pixel position in world's coordinates
	dim pos#(3)
	rem Current pixel ray direction (normalized)
	dim dir#(3)
	rem Current ray HitInfo
	dim hitpoint#(3)
	dim hitnormal#(3)
	
	rem Get camera position
	cam#(1) = camera position x()
	cam#(2) = camera position y()
	cam#(3) = camera position z()
	cama# = camera angle x()
	camb# = camera angle y()
	camc# = camera angle z()

	rem Get camera coordinate system in (camright#,camup#,camforward#) system
	BuildLocalCoordinateSystem(cama#,camb#,camc#)

	for j=1 to height
		for i=1 to width

			rem Get ray direction in world coordinate system
			BuildDirectionRay(i,j,width,height,planeWidth#,planeHeight#)
			rem Result in dir# array
	
			if dir#(1) < 0.0 then dir#(1) = 0.0
			if dir#(1) > 1.0 then dir#(1) = 1.0
			if dir#(2) < 0.0 then dir#(2) = 0.0
			if dir#(2) > 1.0 then dir#(2) = 1.0
			if dir#(3) < 0.0 then dir#(3) = 0.0
			if dir#(3) > 1.0 then dir#(3) = 1.0
			pixels(i,j,1)=dir#(1)*255
			pixels(i,j,2)=dir#(2)*255
			pixels(i,j,3)=dir#(3)*255
		next i
	next j

	
	rem -----------------------
	rem ------ RENDERING ------
	rem -----------------------
	
	set camera view 0,0,1,1
	
	Render2D(width,height,pratio)

	suspend for key

	set camera view 0,0,width,height
endif

if spacekey()=1
	rem ---- Arrays declarations ----
	rem Image data in RGB
	dim pixels(width,height,3)
	rem Camera position coordinates
	dim cam#(3)
	rem Camera local coordinate system
	dim camforward#(3)
	dim camup#(3)
	dim camright#(3)
	rem Current pixel position in world's coordinates
	dim pos#(3)
	rem Current pixel direction ray (normalized)
	dim dir#(3)
	
	cam#(1) = camera position x()
	cam#(2) = camera position y()
	cam#(3) = camera position z()
	cama# = camera angle x()
	camb# = camera angle y()
	camc# = camera angle z()

	rem Get camera coordinate system in (camright#,camup#,camforward#) system
	BuildLocalCoordinateSystem(cama#,camb#,camc#)
	
	for x=1 to 10
		for y=1 to 10
			rem ID of the current object
			id = (x-1)*10 + y

			if (object exist(id)=0)
				make object sphere id,0.1
				set object id,1,1,0
			endif

			rem Get ray direction in world coordinate system
			BuildDirectionRay(x,y,10,10,planeWidth#,planeHeight#)
			rem Result in dir# array, pos# array has current pixel point coordinate in world coordinate system

			if dir#(1) < 0.0 then dir#(1) = 0.0
			if dir#(1) > 1.0 then dir#(1) = 1.0
			if dir#(2) < 0.0 then dir#(2) = 0.0
			if dir#(2) > 1.0 then dir#(2) = 1.0
			if dir#(3) < 0.0 then dir#(3) = 0.0
			if dir#(3) > 1.0 then dir#(3) = 1.0
			position object id,pos#(1),pos#(2),pos#(3)
			color object id,rgb(dir#(1)*255,dir#(2)*255,dir#(3)*255)
		next y
	next x
endif

if escapekey()=1
	exit
endif

loop

end
